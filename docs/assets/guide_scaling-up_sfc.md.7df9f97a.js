import{_ as s,c as a,o as n,a as l}from"./app.be9c8b40.js";const e='{"title":"单文件组件","description":"","frontmatter":{},"headers":[{"level":2,"title":"介绍","slug":"introduction"},{"level":2,"title":"为什么要使用 SFC","slug":"why-sfc"},{"level":2,"title":"SFC 是如何工作的","slug":"how-it-works"},{"level":2,"title":"如何看待关注点分离？","slug":"what-about-separation-of-concerns"}],"relativePath":"guide/scaling-up/sfc.md"}',p={},o=[l('<h1 id="single-file-components" tabindex="-1">单文件组件 <a class="header-anchor" href="#single-file-components" aria-hidden="true">#</a></h1><h2 id="introduction" tabindex="-1">介绍 <a class="header-anchor" href="#introduction" aria-hidden="true">#</a></h2><p>Vue 的单文件组件 (即 <code>*.vue</code> 文件，简称 <strong>SFC</strong>) 是一种特殊的文件格式，使我们能够将一个 Vue 组件的模板、逻辑与样式封装在单个文件中。下面是一个单文件组件的示例：</p><div class="language-vue"><pre><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">data</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#F07178;">      greeting</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Hello World!</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">script</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">class</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">greeting</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">&gt;{{</span><span style="color:#A6ACCD;"> greeting </span><span style="color:#89DDFF;">}}&lt;/</span><span style="color:#F07178;">p</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">template</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">greeting</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">font-weight</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> bold</span><span style="color:#89DDFF;">;</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">style</span><span style="color:#89DDFF;">&gt;</span></span>\n<span class="line"></span></code></pre></div><p>如你所见，Vue 的单文件组件是 HTML、CSS 和 JavaScript 三种元素的自然延伸。<code>&lt;template&gt;</code>、<code>&lt;script&gt;</code> 和 <code>&lt;style&gt;</code> 三个块在同一个文件中封装、组合了组件的视图、逻辑和样式。完整的语法定义可以查阅 <a href="/vue3/api/sfc-spec.html">SFC 语法说明</a>。</p><h2 id="why-sfc" tabindex="-1">为什么要使用 SFC <a class="header-anchor" href="#why-sfc" aria-hidden="true">#</a></h2><p>尽管 SFC 需要一套构建步骤，但也相应地有非常多优势：</p><ul><li>使用熟悉的 HTML、CSS 和 JavaScript 语法编写模块化的组件</li><li><a href="#what-about-separation-of-concerns">罗列本身就强耦合的逻辑关注点</a></li><li>预编译模板</li><li><a href="/vue3/api/sfc-css-features.html">组件级隔离的 CSS</a></li><li><a href="/vue3/api/sfc-script-setup.html">在使用组合式 API 时语法更简单</a></li><li>通过交叉分析模板和逻辑代码能进行更多编译时优化</li><li><a href="/vue3/guide/scaling-up/tooling.html#ide-support">更好的 IDE 支持</a>，提供自动补全和对模板中表达式的类型检查</li><li>开箱即用的模块热更新 (HMR) 支持</li></ul><p>SFC 是 Vue 框架提供的一个功能，并且在下列场景中都是官方推荐的项目组织方式：</p><ul><li>单页面应用 (SPA)</li><li>静态站点生成 (SSG)</li><li>大型的前端项目，若使用构建步骤可以获得更好的开发体验 (DX)</li></ul><p>当然，我们也意识到有些场景下使用 SFC 有些过犹不及。因此 Vue 同样也可以在无构建步骤的情况下以纯 JavaScript 方式使用。如果你正希望通过简单的交互来增强静态 HTML，你可以看看 <a href="https://github.com/vuejs/petite-vue" target="_blank" rel="noopener noreferrer">petite-vue</a>，它是一个 6 kB 左右、预优化过的 Vue 子集，更适合渐进式集成的需求。</p><h2 id="how-it-works" tabindex="-1">SFC 是如何工作的 <a class="header-anchor" href="#how-it-works" aria-hidden="true">#</a></h2><p>Vue SFC 是一个框架指定的文件格式，因此必须交由 <a href="https://github.com/vuejs/core/tree/main/packages/compiler-sfc" target="_blank" rel="noopener noreferrer">@vue/compiler-sfc</a> 编译为标准的 JavaScript 和 CSS，一个编译后的 SFC 是一个标准的 JavaScript(ES) 模块，这也意味着通过适当的构建配置，你可以像导入其他 ES 模块一样导入 SFC：</p><div class="language-js"><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> MyComponent </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./MyComponent.vue</span><span style="color:#89DDFF;">&#39;</span></span>\n<span class="line"></span>\n<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">components</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>\n<span class="line"><span style="color:#A6ACCD;">    MyComponent</span></span>\n<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>\n<span class="line"><span style="color:#89DDFF;">}</span></span>\n<span class="line"></span></code></pre></div><p>SFC 中的 <code>&lt;style&gt;</code> 标签一般会在开发时注入成原生的 <code>&lt;style&gt;</code> 标签以支持热更新，而生产环境下它们会被抽取、合并成单独的 CSS 文件。</p><p>你可以在 <a href="https://sfc.vuejs.org/" target="_blank" rel="noopener noreferrer">Vue SFC 演练场</a>中实际使用一下单文件组件，同时可以看到它们最终被编译后的样子。</p><p>在实际项目中，我们一般会使用集成了 SFC 编译器的构建工具，比如 <a href="https://vitejs.dev/" target="_blank" rel="noopener noreferrer">Vite</a> 或者 <a href="http://cli.vuejs.org/" target="_blank" rel="noopener noreferrer">Vue CLI</a> (基于 <a href="https://webpack.js.org/" target="_blank" rel="noopener noreferrer">webpack</a>)，Vue 官方也提供了脚手架工具来帮助你尽可能快速地上手开发 SFC。查看 <a href="/vue3/guide/scaling-up/tooling.html">SFC 工具链</a>一章获取更多细节。</p><h2 id="what-about-separation-of-concerns" tabindex="-1">如何看待关注点分离？ <a class="header-anchor" href="#what-about-separation-of-concerns" aria-hidden="true">#</a></h2><p>一些有着传统 Web 开发背景的用户可能会因为 SFC 将不同的关注点集合在一处而有所顾虑，觉得 HTML/CSS/JS 应当是分离开的！</p><p>要回答这个问题，我们必须对这一点达成共识：<strong>分离关注点不等于不同的文件类型</strong>。前端工程化的最终目的都是为了能够更好地维护代码。逻辑关注点分离不应该是教条式地将其视为文件类型的区别和分离，这不能直接地帮助我们在日益复杂的前端应用的背景下提高开发效率。</p><p>在现代的 UI 开发中，我们发现与其将代码库划分为三个巨大的层，相互交织在一起，不如将它们划分为松散耦合的组件，再按需组合起来。在一个组件中，其模板、逻辑和样式本就是有内在联系的、是耦合的，将它们放在一起，实际上使组件更有内聚性和可维护性。</p><p>即使你不喜欢单文件组件这样的形式而仍然选择拆分单独的 JavaScript 和 CSS 文件，也没关系，你还是可以通过<a href="/vue3/api/sfc-spec.html#src-imports">资源导入</a>获得热更新和预编译等功能的支持。</p>',22)];var t=s(p,[["render",function(s,l,e,p,t,r){return n(),a("div",null,o)}]]);export{e as __pageData,t as default};
