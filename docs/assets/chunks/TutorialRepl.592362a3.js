import{R as s,o as n,a,r as o,b as l}from"./utils.697f7bb6.js";import{_ as p,g as e,a4 as t,r as c,a5 as r,h as i,X as d,c as D,d as F,j as y,ac as C,w as A,u,ad as h,t as m,l as v,$ as f,ae as g,e as b,af as x,o as E,F as j,n as T,i as w,W as k,k as M}from"../app.be9c8b40.js";const q=JSON.parse('{"step-1":{"App":{"template.html":"<h1>Hello World!</h1>\\n"},"description.md":"<h1 id=\\"getting-started\\" tabindex=\\"-1\\">入门 <a class=\\"header-anchor\\" href=\\"#getting-started\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>欢迎来到 Vue 教程！</p>\\n<p>本教程的目标是让你在浏览器中快速体验使用 Vue 是什么感受。教程不会面面俱到，你也无需在进行下一步之前理解一切。但是，在完成之后，请务必阅读<a target=\\"_blank\\" href=\\"/guide/introduction.html\\">指南</a>，其中包含了每个话题更多的细节。</p>\\n<h2 id=\\"prerequisites\\" tabindex=\\"-1\\">前置要求 <a class=\\"header-anchor\\" href=\\"#prerequisites\\" aria-hidden=\\"true\\">#</a></h2>\\n<p>本教程假定你基本熟悉 HTML、CSS 和 JavaScript。对于前端开发来说，一个完全的新手也许并不适合直接学习一个框架——最好是掌握了基础知识再回来。其他框架的经验会有所帮助，但这并不是必需的。</p>\\n<h2 id=\\"how-to-use-this-tutorial\\" tabindex=\\"-1\\">如何使用本教程 <a class=\\"header-anchor\\" href=\\"#how-to-use-this-tutorial\\" aria-hidden=\\"true\\">#</a></h2>\\n<p>你可以编辑<span class=\\"wide\\">右侧</span><span class=\\"narrow\\">上方</span>的代码，并立即看到结果更新。教程每一步都会介绍一个 Vue 的核心功能，并期望你能够补全代码，让 demo 运行起来。如果你卡住了，会有一个“看答案！”按钮，点击它，会为你揭晓能够运行的代码。试着不要太依赖该按钮——自己解决会学得更快。</p>\\n<p>如果你是一名来自 Vue 2 或其他框架的资深开发者，你可以调整一些设置来充分使用本教程。如果你是一名初学者，推荐使用默认设置进行学习。</p>\\n<details>\\n<summary>教程设置详情</summary>\\n<ul>\\n<li>\\n<p>Vue 提供了两种 API 风格：选项式 API 和组合式 API。本教程两者都支持——你可以使用顶部的 <strong>API 风格偏好</strong>来选择你喜欢的风格。<a target=\\"_blank\\" href=\\"/guide/introduction.html#api-styles\\">了解更多有关 API 风格的信息</a>。</p>\\n</li>\\n<li>\\n<p>你也可以在 SFC 模式和 HTML 模式之间切换。前者会以<a target=\\"_blank\\" href=\\"/guide/introduction.html#single-file-components\\">单文件组件</a> (SFC) 的格式展示示例代码，这是大多数开发者配合构建步骤使用 Vue 的模式。HTML 模式则在无需构建步骤时使用。</p>\\n</li>\\n</ul>\\n</details>\\n<p>准备好了吗？点击“下一步”按钮开始吧。</p>\\n"},"step-10":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const todoId = ref(1)\\n    const todoData = ref(null)\\n\\n    async function fetchData() {\\n      todoData.value = null\\n      const res = await fetch(\\n        `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\\n      )\\n      todoData.value = await res.json()\\n    }\\n\\n    fetchData()\\n\\n    return {\\n      todoId,\\n      todoData\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      todoId: 1,\\n      todoData: null\\n    }\\n  },\\n  methods: {\\n    async fetchData() {\\n      this.todoData = null\\n      const res = await fetch(\\n        `https://jsonplaceholder.typicode.com/todos/${this.todoId}`\\n      )\\n      this.todoData = await res.json()\\n    }\\n  },\\n  mounted() {\\n    this.fetchData()\\n  }\\n}\\n","template.html":"<p>Todo id: {{ todoId }}</p>\\n<button @click=\\"todoId++\\">Fetch next todo</button>\\n<p v-if=\\"!todoData\\">Loading...</p>\\n<pre v-else>{{ todoData }}</pre>\\n"},"_hint":{"App":{"composition.js":"import { ref, watch } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const todoId = ref(1)\\n    const todoData = ref(null)\\n\\n    async function fetchData() {\\n      todoData.value = null\\n      const res = await fetch(\\n        `https://jsonplaceholder.typicode.com/todos/${todoId.value}`\\n      )\\n      todoData.value = await res.json()\\n    }\\n\\n    fetchData()\\n\\n    watch(todoId, fetchData)\\n\\n    return {\\n      todoId,\\n      todoData\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      todoId: 1,\\n      todoData: null\\n    }\\n  },\\n  methods: {\\n    async fetchData() {\\n      this.todoData = null\\n      const res = await fetch(\\n        `https://jsonplaceholder.typicode.com/todos/${this.todoId}`\\n      )\\n      this.todoData = await res.json()\\n    }\\n  },\\n  mounted() {\\n    this.fetchData()\\n  },\\n  watch: {\\n    todoId() {\\n      this.fetchData()\\n    }\\n  }\\n}\\n","template.html":"<p>Todo id: {{ todoId }}</p>\\n<button @click=\\"todoId++\\">Fetch next todo</button>\\n<p v-if=\\"!todoData\\">Loading...</p>\\n<pre v-else>{{ todoData }}</pre>\\n"},"description.md":{}},"description.md":"<h1 id=\\"侦听器\\" tabindex=\\"-1\\">侦听器 <a class=\\"header-anchor\\" href=\\"#侦听器\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>有时我们需要响应性地执行一些“副作用”——例如，当一个数字改变时将其输出到控制台。我们可以通过侦听器来实现它：</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">watch</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">watch</span><span style=\\"color: #A6ACCD\\">(count</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">newCount</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 没错，console.log() 是一个副作用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #A6ACCD\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">`</span><span style=\\"color: #C3E88D\\">new count is: </span><span style=\\"color: #89DDFF\\">${</span><span style=\\"color: #A6ACCD\\">newCount</span><span style=\\"color: #89DDFF\\">}`</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><code>watch()</code> 可以直接侦听一个 ref，并且只要 <code>count</code> 的值改变就会触发回调。<code>watch()</code> 也可以侦听其他类型的数据源——更多详情请参阅 <a target=\\"_blank\\" href=\\"/guide/essentials/watchers.html\\">指南——侦听器</a>.</p>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">watch</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">count</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">newCount</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 没错，console.log() 是一个副作用</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #A6ACCD\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">`</span><span style=\\"color: #C3E88D\\">new count is: </span><span style=\\"color: #89DDFF\\">${</span><span style=\\"color: #A6ACCD\\">newCount</span><span style=\\"color: #89DDFF\\">}`</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>这里，我们使用 <code>watch</code> 选项来侦听 <code>count</code> property 的变化。当 <code>count</code> 改变时，侦听回调将被调用，并且接收新值作为参数。更多详情请参阅 <a target=\\"_blank\\" href=\\"/guide/essentials/watchers.html\\">指南——侦听器</a>.</p>\\n</div>\\n<p>一个比在控制台输出更加实际的例子是当 ID 改变时抓取新的数据。我们这里的代码是当组件被挂载时，从模拟 API 中抓取 todo 数据。还有一个按钮可以增加要抓取的 todo 的 ID。尝试实现一个侦听器，当按钮被点击时抓取新的 todo 项目。</p>\\n"},"step-11":{"App":{"composition.js":"export default {\\n  // register component\\n}\\n","options.js":"export default {\\n  // register child component\\n}\\n","template.html":"\x3c!-- render child component --\x3e\\n"},"ChildComp":{"template.html":"<h2>A Child Component!</h2>\\n"},"_hint":{"App":{"composition.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  }\\n}\\n","template.html":"<ChildComp />\\n"},"ChildComp":{"template.html":"<h2>A Child Component!</h2>\\n"},"description.md":{}},"description.md":"<h1 id=\\"组件\\" tabindex=\\"-1\\">组件 <a class=\\"header-anchor\\" href=\\"#组件\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>目前为止，我们只使用了单个组件。真正的 Vue 应用往往是由嵌套组件创建的。</p>\\n<p>父组件可以在模板中渲染另一个组件作为子组件。要使用子组件，我们需要先导入它：</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> ChildComp </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">./ChildComp.vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> ChildComp </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">./ChildComp.vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">components</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    ChildComp</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>我们还需要使用 <code>components</code> 选项注册组件。这里我们使用对象 property 的简写形式在 <code>ChildComp</code> 键下注册 <code>ChildComp</code> 组件。</p>\\n</div>\\n</div>\\n<div class=\\"sfc\\">\\n<p>然后我们就可以在模板中使用组件，就像这样：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\"> /&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> ChildComp </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">./ChildComp.js</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">components</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    ChildComp</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>我们还需要使用 <code>components</code> 选项注册组件。这里我们使用对象 property 的简写形式在 <code>ChildComp</code> 键下注册 <code>ChildComp</code> 组件。</p>\\n<p>因为我们是在 DOM 中编写模板语法，因此需要遵循浏览器的大小写敏感的标签解析规则。所以，我们需要使用 kebab-case 的名字来引用子组件：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>现在自己尝试一下——导入子组件并在模板中渲染它。</p>\\n"},"step-12":{"App":{"composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const greeting = ref(\'Hello from parent\')\\n\\n    return {\\n      greeting\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      greeting: \'Hello from parent\'\\n    }\\n  }\\n}\\n","template.html":"<ChildComp />\\n"},"ChildComp":{"composition.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","template.html":"<h2>{{ msg || \'No props passed yet\' }}</h2>\\n"},"_hint":{"App":{"template.html":"<ChildComp :msg=\\"greeting\\" />\\n","composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const greeting = ref(\'Hello from parent\')\\n\\n    return {\\n      greeting\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      greeting: \'Hello from parent\'\\n    }\\n  }\\n}\\n"},"ChildComp":{"composition.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","options.js":"export default {\\n  props: {\\n    msg: String\\n  }\\n}\\n","template.html":"<h2>{{ msg || \'No props passed yet\' }}</h2>\\n"},"description.md":{}},"description.md":"<h1 id=\\"props\\" tabindex=\\"-1\\">Props <a class=\\"header-anchor\\" href=\\"#props\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>子组件可以通过 <strong>props</strong> 从父组件接受输入。首先，需要声明它接受的 prop：</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">&lt;!-- ChildComp.vue --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">setup</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> props </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">defineProps</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">msg</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #FFCB6B\\">String</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>注意 <code>defineProps()</code> 是一个编译时宏，并不需要导入。一旦声明，<code>msg</code> prop 就可以在子组件的模板中使用。它也可以通过 <code>defineProps()</code> 所返回的对象在 JavaScript 中访问。</p>\\n</div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// 在子组件中</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">props</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">msg</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #FFCB6B\\">String</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">setup</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">props</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 访问 props.msg</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>一旦声明，<code>msg</code> prop 就会暴露在 <code>this</code> 上，并可以在子组件的模板中使用。接收到的 prop 会作为第一个参数传递给 <code>setup()</code>。</p>\\n</div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// 在子组件中</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">props</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">msg</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #FFCB6B\\">String</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>一旦声明，<code>msg</code> prop 就会暴露在 <code>this</code> 上，并可以在子组件的模板中使用。</p>\\n</div>\\n<p>父组件也可以像传递 attribute 一样传递 prop。若要传递动态值，我们还可以使用 <code>v-bind</code> 语法：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">msg</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">greeting</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> /&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">msg</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">greeting</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>现在在编辑器中自己尝试一下吧。</p>\\n"},"step-13":{"App":{"composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const childMsg = ref(\'No child msg yet\')\\n\\n    return {\\n      childMsg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      childMsg: \'No child msg yet\'\\n    }\\n  }\\n}\\n","template.html":"<ChildComp />\\n<p>{{ childMsg }}</p>\\n"},"ChildComp":{"composition.js":"export default {\\n  emits: [\'response\'],\\n  setup(props, { emit }) {\\n    emit(\'response\', \'hello from child\')\\n    return {}\\n  }\\n}\\n","options.js":"export default {\\n  emits: [\'response\'],\\n  created() {\\n    this.$emit(\'response\', \'hello from child\')\\n  }\\n}\\n","template.html":"<h2>Child component</h2>\\n"},"_hint":{"App":{"template.html":"<ChildComp @response=\\"(msg) => childMsg = msg\\" />\\n<p>{{ childMsg }}</p>\\n","composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const childMsg = ref(\'No child msg yet\')\\n\\n    return {\\n      childMsg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      childMsg: \'No child msg yet\'\\n    }\\n  }\\n}\\n"},"ChildComp":{"composition.js":"export default {\\n  emits: [\'response\'],\\n  setup(props, { emit }) {\\n    emit(\'response\', \'hello from child\')\\n    return {}\\n  }\\n}\\n","options.js":"export default {\\n  emits: [\'response\'],\\n  created() {\\n    this.$emit(\'response\', \'hello from child\')\\n  }\\n}\\n","template.html":"<h2>Child component</h2>\\n"},"description.md":{}},"description.md":"<h1 id=\\"emits\\" tabindex=\\"-1\\">Emits <a class=\\"header-anchor\\" href=\\"#emits\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>除了接收 prop，子组件还可以向父组件触发事件：</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">setup</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// 声明触发的事件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> emit </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">defineEmits</span><span style=\\"color: #A6ACCD\\">([</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">// 带参数触发</span></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">emit</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">hello from child</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 声明触发的事件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">emits</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> [</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">]</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">setup</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">props</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #A6ACCD\\"> emit </span><span style=\\"color: #89DDFF\\">})</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 带参数触发</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #82AAFF\\">emit</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">hello from child</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 声明触发的事件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">emits</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> [</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">]</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">created</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 带参数触发</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #82AAFF\\">$emit</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">response</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">hello from child</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p><span class=\\"options-api\\"><code>this.$emit()</code></span><span class=\\"composition-api\\"><code>emit()</code></span> 的第一个参数是事件的名称。其他所有参数都将传递给事件监听器。</p>\\n<p>父组件可以使用 <code>v-on</code> 监听子组件触发的事件——这里的处理函数接收了子组件触发事件时的额外参数并将它赋值给了本地状态：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\"> @</span><span style=\\"color: #C792EA\\">response</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">msg</span><span style=\\"color: #89DDFF\\">) </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #A6ACCD\\">childMsg</span><span style=\\"color: #89DDFF\\"> = </span><span style=\\"color: #A6ACCD\\">msg</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> /&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\"> @</span><span style=\\"color: #C792EA\\">response</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">msg</span><span style=\\"color: #89DDFF\\">) </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #A6ACCD\\">childMsg</span><span style=\\"color: #89DDFF\\"> = </span><span style=\\"color: #A6ACCD\\">msg</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>现在在编辑器中自己尝试一下吧。</p>\\n"},"step-14":{"App":{"composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const msg = ref(\'from parent\')\\n\\n    return {\\n      msg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      msg: \'from parent\'\\n    }\\n  }\\n}\\n","template.html":"<ChildComp></ChildComp>\\n"},"ChildComp":{"template.html":"<slot>Fallback content</slot>\\n"},"_hint":{"App":{"template.html":"<ChildComp>Message: {{ msg }}</ChildComp>\\n","composition.js":"import { ref } from \'vue\'\\nimport ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  setup() {\\n    const msg = ref(\'from parent\')\\n\\n    return {\\n      msg\\n    }\\n  }\\n}\\n","options.js":"import ChildComp from \'./ChildComp.vue\'\\n\\nexport default {\\n  components: {\\n    ChildComp\\n  },\\n  data() {\\n    return {\\n      msg: \'from parent\'\\n    }\\n  }\\n}\\n"},"ChildComp":{"template.html":"<slot>Fallback content</slot>\\n"},"description.md":{}},"description.md":"<h1 id=\\"插槽\\" tabindex=\\"-1\\">插槽 <a class=\\"header-anchor\\" href=\\"#插槽\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>除了通过 prop 传递数据外，父组件还可以通过<strong>插槽</strong>将模板片段传递给子组件：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  This is some slot content!</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #FFCB6B\\">ChildComp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  This is some slot content!</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">child-comp</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>在子组件中，可以使用 <code>&lt;slot&gt;</code> 元素作为插口渲染父组件中的插槽内容：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">&lt;!-- 在子组件的模板中 --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">/&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #676E95; font-style: italic\\">&lt;!-- 在子组件的模板中 --&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p><code>&lt;slot&gt;</code> 插口中的内容将被当作“默认”内容：它会在父组件没有传递任何插槽内容时显示：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">Fallback content</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">slot</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>现在我们没有给 <code>&lt;ChildComp&gt;</code> 传递任何插槽内容，所以你将看到默认内容。让我们利用父组件的 <code>msg</code> 状态为子组件提供一些插槽内容吧。</p>\\n"},"step-15":{"App":{"composition.js":"import JSConfetti from \'js-confetti\'\\n\\nconst confetti = new JSConfetti()\\n\\nexport default {\\n  setup() {\\n    function showConfetti() {\\n      confetti.addConfetti()\\n    }\\n\\n    showConfetti()\\n\\n    return {\\n      showConfetti\\n    }\\n  }\\n}\\n","options.js":"import JSConfetti from \'js-confetti\'\\n\\nconst confetti = new JSConfetti()\\n\\nexport default {\\n  mounted() {\\n    this.showConfetti()\\n  },\\n  methods: {\\n    showConfetti() {\\n      confetti.addConfetti()\\n    }\\n  }\\n}\\n","style.css":"h1 {\\n  text-align: center;\\n  cursor: pointer;\\n  margin-top: 3em;\\n}\\n","template.html":"<h1 @click=\\"showConfetti\\">🎉 Congratulations!</h1>\\n"},"description.md":"<h1 id=\\"你做到了！\\" tabindex=\\"-1\\">你做到了！ <a class=\\"header-anchor\\" href=\\"#你做到了！\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>你已经完成了整个教程！</p>\\n<p>此时，你应该清楚地了解了使用 Vue 的感觉。然而，我们飞快地介绍了许多东西，也隐藏了一些细节，所以一定不要停止学习！接下来，你可以：</p>\\n<ul>\\n<li>\\n<p>跟随<a href=\\"/guide/quick-start.html\\">快速开始</a>，在你的机器上建立一个真实的 Vue 项目。</p>\\n</li>\\n<li>\\n<p>通读<a href=\\"/guide/essentials/application.html\\">指南</a>，它更详细地涵盖了我们目前所学习的所有主题，以及更多其他内容。</p>\\n</li>\\n<li>\\n<p>查看一些更加实际的<a href=\\"/examples/\\">范例</a>。</p>\\n</li>\\n</ul>\\n<p>我们迫不及待地想要看到你接下来的创造！</p>\\n","import-map.json":"{\\n  \\"imports\\": {\\n    \\"js-confetti\\": \\"https://cdn.jsdelivr.net/npm/js-confetti/+esm\\"\\n  }\\n}\\n"},"step-2":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    // component logic\\n\\n    return {\\n      // exposed to template\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  // component options\\n}\\n","template.html":"<h1>Hello World!</h1>\\n"},"_hint":{"App":{"composition.js":"import { reactive, ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const counter = reactive({ count: 0 })\\n    const message = ref(\'Hello World!\')\\n\\n    return {\\n      counter,\\n      message\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      message: \'Hello World!\',\\n      counter: {\\n        count: 0\\n      }\\n    }\\n  }\\n}\\n","template.html":"<h1>{{ message }}</h1>\\n<p>Count is: {{ counter.count }}</p>\\n"},"description.md":{}},"description.md":"<h1 id=\\"declarative-rendering\\" tabindex=\\"-1\\">声明式渲染 <a class=\\"header-anchor\\" href=\\"#declarative-rendering\\" aria-hidden=\\"true\\">#</a></h1>\\n<div class=\\"sfc\\">\\n<p>你在编辑器中看到的是一个 Vue 单文件组件 (SFC)。SFC 是一个可重用的独立代码块，它将从属于同一个组件的 HTML、CSS 和 JavaScript 封装到了一个 <code>.vue</code> 文件中。</p>\\n</div>\\n<p>Vue 的核心功能是<strong>声明式渲染</strong>：通过扩展了标准 HTML 的模板语法，我们可以根据 JavaScript 的状态来描述 HTML 应该是什么样子的。当状态改变时，HTML 会自动更新。</p>\\n<div class=\\"composition-api\\">\\n<p>能在改变时触发更新的状态被认为是<strong>响应式</strong>的。我们可以使用 Vue 的 <code>reactive()</code> API 来声明响应式状态。由 <code>reactive()</code> 创建的对象都是 JavaScript <a href=\\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Proxy\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Proxy</a>，其工作方式与普通对象相同：</p>\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">reactive</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> counter </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">reactive</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #A6ACCD\\">(counter</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">count) </span><span style=\\"color: #676E95; font-style: italic\\">// 0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">counter</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><code>reactive()</code> 只适用于对象 (包括数组和内置类型，如 <code>Map</code> 和 <code>Set</code>)。此外，<code>ref()</code> 可以接受任何值类型，并创建一个对象，在 <code>.value</code> property 下暴露内部值。</p>\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> message </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">Hello World!</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">console</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">log</span><span style=\\"color: #A6ACCD\\">(message</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value) </span><span style=\\"color: #676E95; font-style: italic\\">// &quot;Hello World!&quot;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">message</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">Changed</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><code>reactive()</code> 和 <code>ref()</code> 的细节在<a target=\\"_blank\\" href=\\"/guide/essentials/reactivity-fundamentals.html\\">指南 - 响应式基础</a>一节中有进一步讨论。</p>\\n<div class=\\"sfc\\">\\n<p>在组件的 <code>&lt;script setup&gt;</code> 块中声明的响应式状态，可以直接在模板中使用。下面展示了我们如何使用双花括号语法，根据 <code>counter</code> 对象和 <code>message</code> ref 的值渲染动态文本：</p>\\n</div>\\n<div class=\\"html\\">\\n<p>传入 <code>createApp()</code> 的对象是一个 Vue 组件。组件的状态应该在 <code>setup()</code> 函数中声明，并使用一个对象返回。</p>\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><div class=\\"highlighted\\">&nbsp;</div><br><br><div class=\\"highlighted\\">&nbsp;</div><br><br><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">setup</span><span style=\\"color: #A6ACCD\\">() </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">counter</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">reactive</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">message</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">Hello World!</span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">counter</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">message</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div><p>返回对象中的 property 可以在模板中使用。下面展示了我们如何使用双花括号语法，根据 <code>message</code> 的值来渲染动态文本：</p>\\n</div>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> message </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">p</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">count is: </span><span style=\\"color: #89DDFF\\">{{</span><span style=\\"color: #A6ACCD\\"> counter</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">count </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">p</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>注意我们在模板中访问的 <code>message</code> ref 时不需要使用 <code>.value</code>：它会被自动解包，让使用更简单。</p>\\n</div>\\n<div class=\\"options-api\\">\\n<p>能在改变时触发更新的状态被认为是<strong>响应式</strong>的。在 Vue 中，响应式状态被保存在组件中。在示例代码中，传递给 <code>createApp()</code> 的对象是一个组件。</p>\\n<p>我们可以使用 <code>data</code> 组件选项来声明响应式状态，该选项应该是一个返回对象的函数：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      message</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">Hello World!</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      message</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">Hello World!</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n<p><code>message</code> property 可以在模板中使用。下面展示了我们如何使用双花括号法，根据 <code>message</code> 的值来渲染动态文本：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> message </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>在双花括号中的内容并不只限于标识符或路径——我们可以使用任何有效的 JavaScript 表达式。</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> message</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">split</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&#39;&#39;</span><span style=\\"color: #A6ACCD\\">)</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">reverse</span><span style=\\"color: #A6ACCD\\">()</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">join</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">&#39;&#39;</span><span style=\\"color: #A6ACCD\\">) </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><div class=\\"composition-api\\">\\n<p>现在，试着自己创建一些响应式状态，用它来为模板中的 <code>&lt;h1&gt;</code> 渲染动态的文本内容。</p>\\n</div>\\n<div class=\\"options-api\\">\\n<p>现在，试着自己创建一个数据 property，用它来为模板中的 <code>&lt;h1&gt;</code> 渲染动态的文本内容。</p>\\n</div>\\n"},"step-3":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const titleClass = ref(\'title\')\\n\\n    return {\\n      titleClass\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      titleClass: \'title\'\\n    }\\n  }\\n}\\n","style.css":".title {\\n  color: red;\\n}\\n","template.html":"<h1>Make me red</h1> \x3c!-- 此处添加一个动态 class 绑定 --\x3e\\n"},"_hint":{"App":{"template.html":"<h1 :class=\\"titleClass\\">Make me red</h1>\\n","composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const titleClass = ref(\'title\')\\n\\n    return {\\n      titleClass\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      titleClass: \'title\'\\n    }\\n  }\\n}\\n","style.css":".title {\\n  color: red;\\n}\\n"},"description.md":{}},"description.md":"<h1 id=\\"attribute-bindings\\" tabindex=\\"-1\\">Attribute 绑定 <a class=\\"header-anchor\\" href=\\"#attribute-bindings\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>在 Vue 中，mustache 语法 (即双大括号) 只能用于文本插值。为了给 attribute 绑定一个动态值，我们使用 <code>v-bind</code> 指令：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">div</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-bind</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #C792EA\\">id</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">dynamicId</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">div</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><strong>指令</strong>是由 <code>v-</code> 开头的一种特殊 attribute。它们是 Vue 模板语法的一部分。和文本插值类似，指令的值是可以访问组件状态的 JavaScript 表达式。关于 <code>v-bind</code> 和指令语法的完整细节请详阅<a target=\\"_blank\\" href=\\"/guide/essentials/template-syntax.html\\">指南 - 模板语法</a>。</p>\\n<p>冒号后面的部分 (<code>:id</code>) 是指令的“参数”。此处，元素的 <code>id</code> attribute 将与组件状态里的 <code>dynamicId</code> property 保持同步。</p>\\n<p>由于 <code>v-bind</code> 使用地非常频繁，它有一个专门的简写语法：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">div</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">id</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">dynamicId</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;&lt;/</span><span style=\\"color: #F07178\\">div</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>现在，试着把一个动态的 <code>class</code> 绑定添加到这个 <code>&lt;h1&gt;</code> 上，并使用 <code>titleClass</code> 的 <span class=\\"options-api\\">data property</span><span class=\\"composition-api\\">ref</span> 作为它的值。如果绑定正确，文字将会变为红色。</p>\\n"},"step-4":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const count = ref(0)\\n\\n    return {\\n      count\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      count: 0\\n    }\\n  }\\n}\\n","template.html":"\x3c!-- 使此按钮生效 --\x3e\\n<button>count is: {{ count }}</button>\\n"},"_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const count = ref(0)\\n\\n    function increment() {\\n      count.value++\\n    }\\n\\n    return {\\n      count,\\n      increment\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      count: 0\\n    }\\n  },\\n  methods: {\\n    increment() {\\n      this.count++\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"increment\\">count is: {{ count }}</button>\\n"},"description.md":{}},"description.md":"<h1 id=\\"event-listeners\\" tabindex=\\"-1\\">事件监听 <a class=\\"header-anchor\\" href=\\"#event-listeners\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>我们可以使用 <code>v-on</code> 指令监听 DOM 事件：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">button</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-on</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #C792EA\\">click</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">increment</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">button</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>因为其经常使用，<code>v-on</code> 也有一个简写语法：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">button</span><span style=\\"color: #89DDFF\\"> @</span><span style=\\"color: #C792EA\\">click</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">increment</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;{{</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">}}&lt;/</span><span style=\\"color: #F07178\\">button</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><div class=\\"options-api\\">\\n<p>此处，<code>increment</code> 引用了一个使用 <code>methods</code> 选项声明的函数：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><br><br><br><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">methods</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">increment</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 更新组件状态</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><br><br><br><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">data</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      count</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #F78C6C\\">0</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">},</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">methods</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">increment</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 更新组件状态</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n<p>在方法中，我们可以使用 <code>this</code> 来访问组件示例。组件实例通过 <code>data</code> 来暴露声明的数据 property。我们可以通过改变这些 property 来更新组件状态。</p>\\n</div>\\n<div class=\\"composition-api\\">\\n<div class=\\"sfc\\">\\n<p>此处，<code>increment</code> 引用了一个在 <code>&lt;script setup&gt;</code> 中声明的函数：</p>\\n<div class=\\"language-vue\\"><div class=\\"highlight-lines\\"><br><br><br><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">setup</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> count </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">increment</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 更新组件状态</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">script</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n<div class=\\"html\\">\\n<p>此处，<code>increment</code> 引用了一个从 <code>setup()</code> 对象返回的方法：</p>\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">setup</span><span style=\\"color: #A6ACCD\\">() </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #F78C6C\\">0</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">increment</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 更新组件状态</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">++</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">count</span><span style=\\"color: #89DDFF\\">,</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">increment</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>在函数中，我们可以通过修改 ref 来更新组件状态。</p>\\n</div>\\n<p>事件处理函数也可以使用内置表达式，并且可以使用修饰符简化常见任务。这些细节包含在<a target=\\"_blank\\" href=\\"/guide/essentials/event-handling.html\\">指南 - 事件处理</a>。</p>\\n<p>现在，尝试自行实现 <code>increment</code> <span class=\\"options-api\\">方法</span><span class=\\"composition-api\\">函数</span>并通过使用 <code>v-on</code> 将其绑定到按钮上。</p>\\n"},"step-5":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const text = ref(\'\')\\n\\n    function onInput(e) {\\n      text.value = e.target.value\\n    }\\n\\n    return {\\n      text,\\n      onInput\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      text: \'\'\\n    }\\n  },\\n  methods: {\\n    onInput(e) {\\n      this.text = e.target.value\\n    }\\n  }\\n}\\n","template.html":"<input :value=\\"text\\" @input=\\"onInput\\" placeholder=\\"Type here\\">\\n<p>{{ text }}</p>\\n"},"_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const text = ref(\'\')\\n\\n    return {\\n      text\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      text: \'\'\\n    }\\n  }\\n}\\n","template.html":"<input v-model=\\"text\\" placeholder=\\"Type here\\">\\n<p>{{ text }}</p>\\n"},"description.md":{}},"description.md":"<h1 id=\\"form-bindings\\" tabindex=\\"-1\\">表单绑定 <a class=\\"header-anchor\\" href=\\"#form-bindings\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>我们可以同时使用 <code>v-bind</code> 和 <code>v-on</code> 来在表单的输入元素上创建双向绑定：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">input</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">value</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">text</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> @</span><span style=\\"color: #C792EA\\">input</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">onInput</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><div class=\\"options-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #FFCB6B\\">methods</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #82AAFF\\">onInput</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #F07178\\">) </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// v-on 处理函数会接收原生 DOM 事件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 作为其参数。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">text</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">target</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">function</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">onInput</span><span style=\\"color: #89DDFF\\">(</span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #89DDFF\\">)</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// v-on 处理函数会接收原生 DOM 事件</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 作为其参数。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #A6ACCD\\">text</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">e</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">target</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>试着在文本框里输入——你会看到 <code>&lt;p&gt;</code> 里的文本也随着你的输入更新了。</p>\\n<p>为了简化双向绑定，Vue 提供了一个 <code>v-model</code> 指令，它实际上是上述操作的语法糖：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">input</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-model</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">text</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p><code>v-model</code> 会将被绑定的值与 <code>&lt;input&gt;</code> 的值自动同步，所以我们就不必使用事件处理函数了。</p>\\n<p><code>v-model</code> 不仅支持文本输入框，也支持诸如多选框、单选框、下拉框之类的输入类型。我们在<a target=\\"_blank\\" href=\\"/guide/essentials/forms.html\\">指南 - 表单绑定</a>中涵盖了更多的细节。</p>\\n<p>现在，试着用 <code>v-model</code> 把代码重构一下吧。</p>\\n"},"step-6":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const awesome = ref(true)\\n\\n    function toggle() {\\n      // ...\\n    }\\n\\n    return {\\n      awesome,\\n      toggle\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      awesome: true\\n    }\\n  },\\n  methods: {\\n    toggle() {\\n      // ...\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"toggle\\">toggle</button>\\n<h1>Vue is awesome!</h1>\\n<h1>Oh no 😢</h1>\\n"},"_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const awesome = ref(true)\\n\\n    function toggle() {\\n      awesome.value = !awesome.value\\n    }\\n\\n    return {\\n      awesome,\\n      toggle\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  data() {\\n    return {\\n      awesome: true\\n    }\\n  },\\n  methods: {\\n    toggle() {\\n      this.awesome = !this.awesome\\n    }\\n  }\\n}\\n","template.html":"<button @click=\\"toggle\\">toggle</button>\\n<h1 v-if=\\"awesome\\">Vue is awesome!</h1>\\n<h1 v-else>Oh no 😢</h1>\\n"},"description.md":{}},"description.md":"<h1 id=\\"条件渲染\\" tabindex=\\"-1\\">条件渲染 <a class=\\"header-anchor\\" href=\\"#条件渲染\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>我们可以使用 <code>v-if</code> 指令来有条件地渲染元素：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-if</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">awesome</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">Vue is awesome!</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>这个 <code>&lt;h1&gt;</code> 标签只会在 <code>awesome</code> 的值为<a href=\\"https://developer.mozilla.org/zh-CN/docs/Glossary/Truthy\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">真值 (Truthy)</a>时渲染。若 <code>awesome</code> 更改为<a href=\\"https://developer.mozilla.org/zh-CN/docs/Glossary/Falsy\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">假值 (Falsy)</a>，它将被从 DOM 中移除。</p>\\n<p>我们也可以使用 <code>v-else</code> 和 <code>v-else-if</code> 来表示其他的条件分支：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-if</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">awesome</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">Vue is awesome!</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-else</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">Oh no 😢</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">h1</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>现在，示例程序同时展示了两个 <code>&lt;h1&gt;</code>标签，并且按钮不执行任何操作。尝试给它们添加 <code>v-if</code> 和 <code>v-else</code> 指令，并实现 <code>toggle()</code> 方法，让我们可以使用按钮在它们之间切换。</p>\\n<p>更多细节请查阅 <code>v-if</code>: <a target=\\"_blank\\" href=\\"/guide/essentials/conditional.html\\">指南——条件渲染</a></p>\\n"},"step-7":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    // 给每个 todo 对象一个唯一的 id\\n    let id = 0\\n\\n    const newTodo = ref(\'\')\\n    const todos = ref([\\n      { id: id++, text: \'Learn HTML\' },\\n      { id: id++, text: \'Learn JavaScript\' },\\n      { id: id++, text: \'Learn Vue\' }\\n    ])\\n\\n    function addTodo() {\\n      // ...\\n      newTodo.value = \'\'\\n    }\\n\\n    function removeTodo(todo) {\\n      // ...\\n    }\\n\\n    return {\\n      newTodo,\\n      todos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"// 给每个 todo 对象一个唯一的 id\\nlet id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: \'\',\\n      todos: [\\n        { id: id++, text: \'Learn HTML\' },\\n        { id: id++, text: \'Learn JavaScript\' },\\n        { id: id++, text: \'Learn Vue\' }\\n      ]\\n    }\\n  },\\n  methods: {\\n    addTodo() {\\n      // ...\\n      this.newTodo = \'\'\\n    },\\n    removeTodo(todo) {\\n      // ...\\n    }\\n  }\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\">\\n  <button>Add Todo</button>    \\n</form>\\n<ul>\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\n    {{ todo.text }}\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n"},"_hint":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    // 给每个 todo 对象一个唯一的 id\\n    let id = 0\\n\\n    const newTodo = ref(\'\')\\n    const todos = ref([\\n      { id: id++, text: \'Learn HTML\' },\\n      { id: id++, text: \'Learn JavaScript\' },\\n      { id: id++, text: \'Learn Vue\' }\\n    ])\\n\\n    function addTodo() {\\n      todos.value.push({ id: id++, text: newTodo.value })\\n      newTodo.value = \'\'\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value = todos.value.filter((t) => t !== todo)\\n    }\\n\\n    return {\\n      newTodo,\\n      todos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"// 给每个 todo 对象一个唯一的 id\\nlet id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: \'\',\\n      todos: [\\n        { id: id++, text: \'Learn HTML\' },\\n        { id: id++, text: \'Learn JavaScript\' },\\n        { id: id++, text: \'Learn Vue\' }\\n      ]\\n    }\\n  },\\n  methods: {\\n    addTodo() {\\n      this.todos.push({ id: id++, text: this.newTodo })\\n      this.newTodo = \'\'\\n    },\\n    removeTodo(todo) {\\n      this.todos = this.todos.filter((t) => t !== todo)\\n    }\\n  }\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\">\\n  <button>Add Todo</button>    \\n</form>\\n<ul>\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\n    {{ todo.text }}\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n"},"description.md":{}},"description.md":"<h1 id=\\"列表渲染\\" tabindex=\\"-1\\">列表渲染 <a class=\\"header-anchor\\" href=\\"#列表渲染\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>我们可以使用 <code>v-for</code> 指令来渲染一个基于源数组的元素列表：</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">ul</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">li</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-for</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">todo</span><span style=\\"color: #89DDFF\\"> in </span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> :</span><span style=\\"color: #C792EA\\">key</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">todo</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">id</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #89DDFF\\">{{</span><span style=\\"color: #A6ACCD\\"> todo</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">text </span><span style=\\"color: #89DDFF\\">}}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">li</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">ul</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>这里的 <code>todo</code> 是一个局部变量，表示当前正在迭代的数组元素。它只能在 <code>v-for</code> 元素上或元素内部访问。</p>\\n<p>注意，我们还给每个 todo 对象设置了唯一的 <code>id</code>，并且将它作为<a target=\\"_blank\\" href=\\"/api/built-in-special-attributes.html#key\\">特殊的 <code>key</code> attribute</a> 绑定到每个 <code>&lt;li&gt;</code>。<code>key</code> 使得 Vue 能够精确的移动每个 <code>&lt;li&gt;</code> ，以匹配对应的对象在数组中的位置。</p>\\n<p>更新列表有两种方式：</p>\\n<ol>\\n<li>\\n<p>在源数组上调用 <a href=\\"https://stackoverflow.com/questions/9009879/which-javascript-array-functions-are-mutating\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">变更方法</a> ：</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">push</span><span style=\\"color: #A6ACCD\\">(newTodo)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div>  </div>\\n  <div class=\\"options-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">push</span><span style=\\"color: #A6ACCD\\">(newTodo)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</li>\\n<li>\\n<p>使用新的数组代替源数组：</p>\\n<div class=\\"composition-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">value</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">filter</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #676E95; font-style: italic\\">/* ... */</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div>  </div>\\n  <div class=\\"options-api\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">todos </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">this.</span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #82AAFF\\">filter</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #676E95; font-style: italic\\">/* ... */</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</li>\\n</ol>\\n<p>这里有一个简单的 todo 列表 - 尝试实现 <code>addTodo()</code> 和 <code>removeTodo()</code> 方法的逻辑，使它能够起作用！</p>\\n<p>关于 <code>v-for</code> 的更多细节：<a target=\\"_blank\\" href=\\"/guide/essentials/list.html\\">指南 - 列表渲染</a></p>\\n"},"step-8":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    let id = 0\\n\\n    const newTodo = ref(\'\')\\n    const hideCompleted = ref(false)\\n    const todos = ref([\\n      { id: id++, text: \'Learn HTML\', done: true },\\n      { id: id++, text: \'Learn JavaScript\', done: true },\\n      { id: id++, text: \'Learn Vue\', done: false }\\n    ])\\n\\n    function addTodo() {\\n      todos.value.push({ id: id++, text: newTodo.value, done: false })\\n      newTodo.value = \'\'\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value = todos.value.filter((t) => t !== todo)\\n    }\\n\\n    return {\\n      newTodo,\\n      hideCompleted,\\n      todos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"let id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: \'\',\\n      hideCompleted: false,\\n      todos: [\\n        { id: id++, text: \'Learn HTML\', done: true },\\n        { id: id++, text: \'Learn JavaScript\', done: true },\\n        { id: id++, text: \'Learn Vue\', done: false }\\n      ]\\n    }\\n  },\\n  computed: {\\n    // ...\\n  },\\n  methods: {\\n    addTodo() {\\n      this.todos.push({ id: id++, text: this.newTodo, done: false })\\n      this.newTodo = \'\'\\n    },\\n    removeTodo(todo) {\\n      this.todos = this.todos.filter((t) => t !== todo)\\n    }\\n  }\\n}\\n","style.css":".done {\\n  text-decoration: line-through;\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\" />\\n  <button>Add Todo</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in todos\\" :key=\\"todo.id\\">\\n    <input type=\\"checkbox\\" v-model=\\"todo.done\\">\\n    <span :class=\\"{ done: todo.done }\\">{{ todo.text }}</span>\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n<button @click=\\"hideCompleted = !hideCompleted\\">\\n  {{ hideCompleted ? \'Show all\' : \'Hide completed\' }}\\n</button>\\n"},"_hint":{"App":{"composition.js":"import { ref, computed } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    let id = 0\\n\\n    const newTodo = ref(\'\')\\n    const hideCompleted = ref(false)\\n    const todos = ref([\\n      { id: id++, text: \'Learn HTML\', done: true },\\n      { id: id++, text: \'Learn JavaScript\', done: true },\\n      { id: id++, text: \'Learn Vue\', done: false }\\n    ])\\n\\n    const filteredTodos = computed(() => {\\n      return hideCompleted.value\\n        ? todos.value.filter((t) => !t.done)\\n        : todos.value\\n    })\\n\\n    function addTodo() {\\n      todos.value.push({ id: id++, text: newTodo.value, done: false })\\n      newTodo.value = \'\'\\n    }\\n\\n    function removeTodo(todo) {\\n      todos.value = todos.value.filter((t) => t !== todo)\\n    }\\n\\n    return {\\n      newTodo,\\n      hideCompleted,\\n      todos,\\n      filteredTodos,\\n      addTodo,\\n      removeTodo\\n    }\\n  }\\n}\\n","options.js":"let id = 0\\n\\nexport default {\\n  data() {\\n    return {\\n      newTodo: \'\',\\n      hideCompleted: false,\\n      todos: [\\n        { id: id++, text: \'Learn HTML\', done: true },\\n        { id: id++, text: \'Learn JavaScript\', done: true },\\n        { id: id++, text: \'Learn Vue\', done: false }\\n      ]\\n    }\\n  },\\n  computed: {\\n    filteredTodos() {\\n      return this.hideCompleted\\n        ? this.todos.filter((t) => !t.done)\\n        : this.todos\\n    }\\n  },\\n  methods: {\\n    addTodo() {\\n      this.todos.push({ id: id++, text: this.newTodo, done: false })\\n      this.newTodo = \'\'\\n    },\\n    removeTodo(todo) {\\n      this.todos = this.todos.filter((t) => t !== todo)\\n    }\\n  }\\n}\\n","template.html":"<form @submit.prevent=\\"addTodo\\">\\n  <input v-model=\\"newTodo\\" />\\n  <button>Add Todo</button>\\n</form>\\n<ul>\\n  <li v-for=\\"todo in filteredTodos\\" :key=\\"todo.id\\">\\n    <input type=\\"checkbox\\" v-model=\\"todo.done\\">\\n    <span :class=\\"{ done: todo.done }\\">{{ todo.text }}</span>\\n    <button @click=\\"removeTodo(todo)\\">X</button>\\n  </li>\\n</ul>\\n<button @click=\\"hideCompleted = !hideCompleted\\">\\n  {{ hideCompleted ? \'Show all\' : \'Hide completed\' }}\\n</button>\\n","style.css":".done {\\n  text-decoration: line-through;\\n}\\n"},"description.md":{}},"description.md":"<h1 id=\\"计算属性\\" tabindex=\\"-1\\">计算属性 <a class=\\"header-anchor\\" href=\\"#计算属性\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>让我们从上一步的 todo 列表上继续构建。现在，我们已经给每一个 todo 添加了切换功能。这是通过给每一个 todo 对象添加 <code>done</code> property 来实现的，并且使用了 <code>v-model</code> 将其绑定到复选框上：</p>\\n<div class=\\"language-vue-html\\"><div class=\\"highlight-lines\\"><br><div class=\\"highlighted\\">&nbsp;</div><br><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">li</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-for</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">todo</span><span style=\\"color: #89DDFF\\"> in </span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">input</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">type</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">checkbox</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">v-model</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #A6ACCD\\">todo</span><span style=\\"color: #89DDFF\\">.</span><span style=\\"color: #A6ACCD\\">done</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  ...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">li</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre></div><p>下一个可以添加的改进是隐藏已经完成的 todo。我们已经有了一个能够切换 <code>hideCompleted</code> 状态的按钮。但是应该如何基于状态渲染不同的列表项呢？</p>\\n<div class=\\"options-api\\">\\n<p>引入 <a target=\\"_blank\\" href=\\"/guide/essentials/computed.html\\">计算属性</a>。我们可以使用 <code>computed</code> 选项声明一个响应式的 property，它的值由其他 property 计算而来：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// ...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">computed</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">filteredTodos</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 根据 `this.hideCompleted` 返回过滤后的 todo 项目</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// ...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">computed</span><span style=\\"color: #89DDFF\\">:</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">    </span><span style=\\"color: #F07178\\">filteredTodos</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 根据 `this.hideCompleted` 返回过滤后的 todo 项目</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"composition-api\\">\\n<p>引入 <a target=\\"_blank\\" href=\\"/guide/essentials/computed.html\\"><code>computed()</code></a>。我们可以创建一个计算属性 ref，它根据其他响应式数据源计算其 <code>.value</code>：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><br><br><br><br><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">computed</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> hideCompleted </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #FF9CAC\\">false</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> todos </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">([</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #676E95; font-style: italic\\">/* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> filteredTodos </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">computed</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 根据 `todos.value` &amp; `hideCompleted.value`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 返回过滤后的 todo 项目</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><div class=\\"highlight-lines\\"><br><br><br><br><br><br><br><br><br><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><div class=\\"highlighted\\">&nbsp;</div><br><br><br><br><br><br><br></div><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">createApp</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">ref</span><span style=\\"color: #89DDFF\\">,</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">computed</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">setup</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">hideCompleted</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #FF9CAC\\">false</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">todos</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">([</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">      </span><span style=\\"color: #676E95; font-style: italic\\">/* ... */</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    ])</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">filteredTodos</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">computed</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 根据 `todos.value` &amp; `hideCompleted.value`</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 返回过滤后的 todo 项目</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// ...</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre></div></div>\\n</div>\\n<div class=\\"language-diff\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">-</span><span style=\\"color: #F07178\\"> &lt;li v-for=&quot;todo in todos&quot;&gt;</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">+</span><span style=\\"color: #C3E88D\\"> &lt;li v-for=&quot;todo in filteredTodos&quot;&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><p>计算属性跟踪其计算中使用的其他响应式状态作为依赖项。它会缓存结果并在其依赖项发生改变时自动更新它。</p>\\n<p>现在，试着添加 <code>filteredTodos</code> 计算属性并实现计算逻辑！如果实现正确，在隐藏已完成的项目时勾选 todo，它也应当被立即隐藏。</p>\\n"},"step-9":{"App":{"composition.js":"import { ref } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const p = ref(null)\\n\\n    return {\\n      p\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  // ...\\n}\\n","template.html":"<p ref=\\"p\\">hello</p>\\n"},"_hint":{"App":{"composition.js":"import { ref, onMounted } from \'vue\'\\n\\nexport default {\\n  setup() {\\n    const p = ref(null)\\n\\n    onMounted(() => {\\n      p.value.textContent = \'mounted!\'\\n    })\\n\\n    return {\\n      p\\n    }\\n  }\\n}\\n","options.js":"export default {\\n  mounted() {\\n    this.$refs.p.textContent = \'mounted!\'\\n  }\\n}\\n","template.html":"<p ref=\\"p\\">hello</p>\\n"},"description.md":{}},"description.md":"<h1 id=\\"生命周期和模板-ref\\" tabindex=\\"-1\\">生命周期和模板 ref <a class=\\"header-anchor\\" href=\\"#生命周期和模板-ref\\" aria-hidden=\\"true\\">#</a></h1>\\n<p>目前为止，Vue 为我们处理了所有的 DOM 更新，这要归功于响应性和声明式渲染。然而，有时我们也会不可避免地需要手动操作 DOM。</p>\\n<p>这时我们需要使用 <strong>模板 ref</strong>——也就是在模板语法中引用一个元素——使用 <a target=\\"_blank\\" href=\\"/api/built-in-special-attributes.html#ref\\">这个特殊的 <code>ref</code> attribute</a>:</p>\\n<div class=\\"language-vue-html\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF\\">&lt;</span><span style=\\"color: #F07178\\">p</span><span style=\\"color: #89DDFF\\"> </span><span style=\\"color: #C792EA\\">ref</span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #C3E88D\\">p</span><span style=\\"color: #89DDFF\\">&quot;</span><span style=\\"color: #89DDFF\\">&gt;</span><span style=\\"color: #A6ACCD\\">hello</span><span style=\\"color: #89DDFF\\">&lt;/</span><span style=\\"color: #F07178\\">p</span><span style=\\"color: #89DDFF\\">&gt;</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div><div class=\\"composition-api\\">\\n<p>要访问 ref，我们需要声明<span class=\\"html\\">并暴露</span>一个同名的 ref：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #A6ACCD\\"> p </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">null</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">setup</span><span style=\\"color: #A6ACCD\\">() </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #C792EA\\">const</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">p</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">=</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #82AAFF\\">ref</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">null</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF; font-style: italic\\">return</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #A6ACCD\\">p</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<p>注意这个 ref 使用 <code>null</code> 值来初始化。这是因为当<span class=\\"sfc\\"><code>&lt;script setup&gt;</code></span><span class=\\"html\\"><code>setup()</code></span> 执行时元素还不存在。模板 ref 只能在组件<strong>挂载</strong>后访问。</p>\\n<p>要在挂载之后执行代码，我们可以使用 <code>onMounted()</code> 函数：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">onMounted</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">onMounted</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">  </span><span style=\\"color: #676E95; font-style: italic\\">// 此时组件已经挂载。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">import</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #A6ACCD\\">onMounted</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">from</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">&#39;</span><span style=\\"color: #C3E88D\\">vue</span><span style=\\"color: #89DDFF\\">&#39;</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">setup</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #82AAFF\\">onMounted</span><span style=\\"color: #F07178\\">(</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #C792EA\\">=&gt;</span><span style=\\"color: #F07178\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">      </span><span style=\\"color: #676E95; font-style: italic\\">// 此时组件已经挂载。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">    </span><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #F07178\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<div class=\\"options-api\\">\\n<p>此元素将作为 <code>this.$refs.p</code> 暴露在 <code>this.$refs</code> 上。然而，你只能在组件<strong>挂载</strong>之后访问它。</p>\\n<p>要在挂载之后执行代码，我们可以使用 <code>mounted</code> 选项：</p>\\n<div class=\\"sfc\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #89DDFF; font-style: italic\\">export</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF; font-style: italic\\">default</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">mounted</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 此时组件已经挂载。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n<div class=\\"html\\">\\n<div class=\\"language-js\\"><pre v-pre><code><span class=\\"line\\"><span style=\\"color: #82AAFF\\">createApp</span><span style=\\"color: #A6ACCD\\">(</span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #A6ACCD\\">  </span><span style=\\"color: #F07178\\">mounted</span><span style=\\"color: #89DDFF\\">()</span><span style=\\"color: #A6ACCD\\"> </span><span style=\\"color: #89DDFF\\">{</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">    </span><span style=\\"color: #676E95; font-style: italic\\">// 此时组件已经挂载。</span></span>\\n<span class=\\"line\\"><span style=\\"color: #F07178\\">  </span><span style=\\"color: #89DDFF\\">}</span></span>\\n<span class=\\"line\\"><span style=\\"color: #89DDFF\\">}</span><span style=\\"color: #A6ACCD\\">)</span></span>\\n<span class=\\"line\\"></span></code></pre>\\n</div></div>\\n</div>\\n<p>这被称为<strong>生命周期钩子</strong>——它允许我们注册一个在组件的特定生命周期调用的回调函数。还有一些其他的钩子如 <span class=\\"options-api\\"><code>created</code> 和 <code>updated</code></span><span class=\\"composition-api\\"><code>onUpdated</code> 和 <code>onUnmounted</code></span>。请查阅 <a target=\\"_blank\\" href=\\"/guide/essentials/lifecycle.html#lifecycle-diagram\\">生命周期图示</a> 获取更多细节。</p>\\n<p>现在，尝试添加一个 <span class=\\"options-api\\"><code>mounted</code></span><span class=\\"composition-api\\"><code>onMounted</code></span> 钩子，通过 <span class=\\"options-api\\"><code>this.$refs.p</code></span><span class=\\"composition-api\\"><code>p.value</code></span> 访问 <code>&lt;p&gt;</code>，并直接对其执行一些 DOM 操作。(例如修改它的 <code>textContent</code>)。</p>\\n"}}');const L={class:"tutorial"},_=["innerHTML"],S={key:0,class:"hint"},I=["href"],H=b(" 上一步"),V=["href"],$=b("下一步 ");var J=p(e({setup(p){const e=new s({defaultVueRuntimeURL:`https://unpkg.com/vue@${t}/dist/vue.esm-browser.js`}),J=c(),O=r("prefer-composition"),B=r("prefer-sfc"),P=c(""),N=Object.keys(q).sort(((s,n)=>Number(s.replace(/^step-/,""))-Number(n.replace(/^step-/,"")))),W=N.length,z=/<h1.*?>(.+?)<a class="header-anchor/,X=N.map(((s,n)=>({text:`${n+1}. ${q[s]["description.md"].match(z)[1]}`,link:`#${s}`}))),R=i((()=>{var s;return null==(s=q[P.value])?void 0:s["description.md"]})),U=i((()=>N.indexOf(P.value)+1)),G=i((()=>{const s=P.value.match(/\d+/),n=s&&"step-"+(+s[0]-1);if(n&&q.hasOwnProperty(n))return n})),K=i((()=>{const s=P.value.match(/\d+/),n=s&&"step-"+(+s[0]+1);if(n&&q.hasOwnProperty(n))return n})),Q=c(!1);function Y(s=!1){let n=location.hash.slice(1);q.hasOwnProperty(n)||(n="step-1",location.hash=`#${n}`),P.value=n;const a=Q.value?q[n]._hint:q[n];e.setFiles(B.value?o(a,O.value):l(a,O.value),B.value?"App.vue":"index.html"),s&&x((()=>{J.value.scrollTop=0}))}function Z(){Q.value=!Q.value,Y()}return d([O,B],(()=>Y())),n((()=>{Q.value=!1,Y(!0)})),Y(),(s,n)=>{var o;return E(),D("section",L,[F("article",{class:"instruction",ref_key:"instruction",ref:J},[y(C),y(u(h),{button:`${u(U)} / ${u(W)}`},{default:A((()=>[(E(!0),D(j,null,T(u(X),((s,n)=>(E(),w(u(M),{class:k(["vt-menu-link",{active:n+1===u(U)}]),href:s.link},{default:A((()=>[b(m(s.text),1)])),_:2},1032,["class","href"])))),256))])),_:1},8,["button"]),F("div",{class:"vt-doc",innerHTML:u(R)},null,8,_),(null==(o=u(q)[P.value])?void 0:o._hint)?(E(),D("div",S,[F("button",{onClick:Z},m(Q.value?"重置代码":"看答案！"),1)])):v("",!0),F("footer",null,[u(G)?(E(),D("a",{key:0,href:`#${u(G)}`},[y(u(f),{class:"vt-link-icon",style:{margin:"0"}}),H],8,I)):v("",!0),u(K)?(E(),D("a",{key:1,class:"next-step",href:`#${u(K)}`},[$,y(u(g),{class:"vt-link-icon"})],8,V)):v("",!0)])],512),y(u(a),{layout:"vertical",store:u(e),showCompileOutput:!1,clearConsole:!1,showImportMap:!1,onKeyup:n[0]||(n[0]=s=>Q.value=!1)},null,8,["store"])])}}}),[["__scopeId","data-v-57c88020"]]);export{J as default};
